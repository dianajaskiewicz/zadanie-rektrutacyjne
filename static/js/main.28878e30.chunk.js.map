{"version":3,"sources":["logo.svg","store/actions/actionTypes.js","store/actions/posts.js","Components/Post/Comment/Comment.js","Components/Post/Comment/CommentForm/CommentForm.js","Components/Post/Post.js","Containers/PostsBuilder/PostsBuilder.js","App.js","store/reducers/posts.js","store/sagas/posts.js","store/sagas/index.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","FETCH_POSTS","FETCH_COMMENTS_START","SAVE_COMMENT_TO_POST","fetchedSuccess","fetchedPosts","type","fetchCommentsSuccess","fetchedComments","id","sendComment","name","body","email","postID","fetchCommentsStart","finishFetchingComments","commentSyle","border","width","margin","cursor","comment","props","react_default","a","createElement","style","onClick","clicked","idPost","title","formStyle","marginTop","marginBottom","CommentForm","state","changeInputHandler","e","_this","setState","Object","defineProperty","target","value","_this2","this","placeholder","onChange","preventDefault","prevState","Component","post","comments","form","loading","fontSize","map","Comment","key","Comment_CommentForm_CommentForm","divStyle","color","display","padding","PostsBuilder","_Component","_getPrototypeOf2","classCallCheck","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","elementsPerPage","currentPage","calculatePages","postCount","parseInt","changePage","pageNumber","inherits","createClass","onFetchPosts","pagesButtons","posts","pagesNumbers","_loop","i","push","slice","Post","onRemoveComment","onSendcomment","onFetchComments","connect","dispatch","actionTypes","postActions","App","className","Containers_PostsBuilder_PostsBuilder","initialState","reducer","undefined","action","objectSpread","filter","catchedComment","Math","random","fetchPostsSaga","fetchCommentsSaga","saveCommentToPostSaga","response","regenerator_default","wrap","_context","prev","next","axios","get","sent","data","put","actions","t0","stop","_marked","_response","_context2","_marked2","postedCommentsId","_context3","localStorage","getItem","setItem","JSON","stringify","parse","includes","alert","_marked3","watchPosts","takeEvery","sagas_marked","Boolean","window","location","hostname","match","rootReducer","combineReducers","postReducer","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.28878e30.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const FETCH_POSTS = 'FETCH_POSTS';\nexport const FETCH_SUCCESS = 'FETCH_SUCCESS';\n\nexport const FETCH_COMMENTS = 'FETCH_COMMENTS';\nexport const FETCH_COMMENTS_START = 'FETCH_COMMENTS_START';\nexport const FETCH_COMMENTS_SUCCESS = 'FETCH_COMMENTS_SUCCESS';\nexport const START_FETCHING_COMMENTS = 'START_FETCHING_COMMENTS';\nexport const FINISH_FETCHING_COMMENTS = 'FINISH_FETCHING_COMMENTS';\nexport const SAVE_COMMENT_TO_POST = 'SAVE_COMMENT_TO_POST';\n\nexport const REMOVE_COMMENT = 'REMOVE_COMMENT';\nexport const SEND_COMMENTS = 'SEND_COMMENTS';\n","import * as actionTypes from './actionTypes';\r\n\r\nexport const fetchPosts = () => {\r\n  return {\r\n    type: actionTypes.FETCH_POSTS,\r\n  }\r\n}\r\n\r\nexport const fetchedSuccess = (fetchedPosts) => {\r\n  return {\r\n    type: actionTypes.FETCH_SUCCESS,\r\n    fetchedPosts: fetchedPosts,\r\n  }\r\n}\r\n\r\nexport const fetchComments = (id) => {\r\n  return {\r\n    type: actionTypes.FETCH_COMMENTS_START,\r\n    id: id,\r\n  }\r\n}\r\n\r\nexport const fetchCommentsSuccess = (fetchedComments, id) => {\r\n  return {\r\n    type: actionTypes.FETCH_COMMENTS_SUCCESS,\r\n    fetchedComments: fetchedComments,\r\n    id: id,\r\n  }\r\n}\r\nexport const removeComment = (postID, id) => {\r\n  return {\r\n    type: actionTypes.REMOVE_COMMENT,\r\n    postID: postID,\r\n    id: id,\r\n  }\r\n}\r\n\r\nexport const sendComment = (name,body, email, postID) => {\r\n  return {\r\n    type: actionTypes.SEND_COMMENTS,\r\n    name: name,\r\n    body: body,\r\n    email: email,\r\n    postID : postID,\r\n  }\r\n}\r\nexport const fetchCommentsStart = () => {\r\n  return {\r\n    type: actionTypes.START_FETCHING_COMMENTS,\r\n  }\r\n}\r\nexport const finishFetchingComments = () => {\r\n  return {\r\n    type: actionTypes.FINISH_FETCHING_COMMENTS,\r\n  }\r\n}\r\nexport const saveCommentToPost = (name,body, email, postID) => {\r\n  return {\r\n    type: actionTypes.SAVE_COMMENT_TO_POST,\r\n    name: name,\r\n    body: body,\r\n    email: email,\r\n    postID : postID,\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst commentSyle= {\r\n  border: '2px solid black',\r\n  width: '80%',\r\n  margin: '0 auto',\r\n  cursor: 'pointer',\r\n}\r\n\r\nconst comment = (props) => {\r\n  return (\r\n    <div style={commentSyle} onClick={() => props.clicked(props.idPost, props.id)}>\r\n      <p>Komentarz</p>\r\n      <p><b>Tytuł:</b> {props.title}</p>\r\n      <p><b>Treść: </b>{props.body}</p>\r\n      <p><b>Email: </b>{props.email}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default comment;\r\n","import React, { Component } from 'react';\r\nimport button from '../../../UI/Button/Button';\r\n\r\nconst formStyle={\r\n  marginTop: '20px',\r\n  marginBottom: '20px',\r\n}\r\n\r\nclass CommentForm  extends Component {\r\n  state = {\r\n    name: '',\r\n    body: '',\r\n    email: '',\r\n  }\r\n\r\n  changeInputHandler = (e, type) => {\r\n    this.setState({\r\n      [type] : e.target.value,\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <form style={formStyle}>\r\n        <input id=\"name\" type=\"text\" placeholder=\"Imię\" name=\"name\" value={this.state.name} onChange={(e) => this.changeInputHandler(e, 'name')} />\r\n        <input id=\"body\" type=\"text\" placeholder=\"Treść\" name=\"body\" value={this.state.body} onChange={(e) => this.changeInputHandler(e, 'body')} />\r\n        <input id=\"email\" type=\"text\" placeholder=\"Email\" name=\"body\" value={this.state.email} onChange={(e) => this.changeInputHandler(e, 'email')} />\r\n        <button onClick={(e) => {\r\n            e.preventDefault();\r\n            this.props.clicked(this.state.name, this.state.body, this.state.email, this.props.idPost)\r\n            this.setState((prevState) => {return {  name: '',  body: '', email: '',}})\r\n          }\r\n        }>Wyślij komentarz</button>\r\n      </form>\r\n    )\r\n  }\r\n\r\n}\r\nexport default CommentForm;\r\n","import React from 'react';\r\nimport Comment from './Comment/Comment';\r\nimport CommentForm from './Comment/CommentForm/CommentForm';\r\n\r\nconst post = (props) => {\r\n  let comments = null;\r\n  let form = null;\r\n  if(props.comments) {\r\n    if(props.loading) {\r\n      comments = (<p style={{fontSize: '70px'}}>Ładowanie</p>);\r\n      form = null;\r\n    } else {\r\n      comments = props.comments.map(comment=>{\r\n       return (\r\n         <Comment\r\n         key={comment.id}\r\n         title={comment.name}\r\n         body={comment.body}\r\n         clicked={props.clicked}\r\n         idPost={props.id}\r\n         id={comment.id}\r\n         email={comment.email} />\r\n       )\r\n     })\r\n    form = <CommentForm clicked={props.sendComment} idPost={props.id} />\r\n    }\r\n  }\r\n  return (\r\n      <article>\r\n          <h1>{props.title}</h1>\r\n          <div>\r\n              <div>{props.body}\r\n              {comments}\r\n              {form}\r\n              </div>\r\n          </div>\r\n      </article>\r\n    )\r\n  }\r\n\r\nexport default post;\r\n","import React, { Component } from 'react';\r\nimport { connect }  from 'react-redux';\r\nimport * as postActions from '../../store/actions/posts';\r\nimport Post from '../../Components/Post/Post';\r\nimport button from '../../Components/UI/Button/Button';\r\nconst divStyle = {\r\n  color: 'black',\r\n  border: '2px solid black',\r\n  margin: '10px',\r\n  width: '48%',\r\n  display: 'inline-block',\r\n  padding: '15px',\r\n};\r\nexport class PostsBuilder extends Component {\r\n  state = {\r\n    elementsPerPage: 20,\r\n    currentPage: 0,\r\n  }\r\n  componentDidMount() {\r\n    this.props.onFetchPosts();\r\n  }\r\n\r\n  calculatePages = (postCount) => {\r\n      const pagesNumbers = parseInt(postCount)/parseInt(this.state.elementsPerPage);\r\n      return pagesNumbers;\r\n  }\r\n\r\n  changePage = (pageNumber) => {\r\n    this.setState({currentPage: pageNumber})\r\n  }\r\n\r\n  render() {\r\n    const pagesButtons = [];\r\n    if(this.props.posts.length > 0) {\r\n       const pagesNumbers = this.calculatePages(this.props.posts.length);\r\n       for(let i=0; i<pagesNumbers; i++) {\r\n          pagesButtons.push(<button\r\n          onClick={() => this.changePage(i)}>{i+1}</button>);\r\n       }\r\n    }\r\n    const posts = this.props.posts.slice(this.state.elementsPerPage*(this.state.currentPage), (this.state.currentPage+1)*(this.state.elementsPerPage)).map(post =>(\r\n      <div style={divStyle}>\r\n        <Post\r\n          key={post.id}\r\n          title={post.title}\r\n          body={post.body}\r\n          email={post.email}\r\n          id={post.id}\r\n          comments = {post.comments}\r\n          clicked={this.props.onRemoveComment}\r\n          sendComment={this.props.onSendcomment}\r\n          loading={this.props.loading} />\r\n        <button onClick={() => this.props.onFetchComments(post.id)}>Pokaż komentarze</button>\r\n      </div>\r\n    ))\r\n    return (\r\n      <div>\r\n        <div>\r\n          {pagesButtons}\r\n        </div>\r\n        {posts}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    posts: state.posts.posts,\r\n    loading: state.posts.loading,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onFetchPosts : () => dispatch(postActions.fetchPosts()),\r\n    onFetchComments: (id) => dispatch(postActions.fetchComments(id)),\r\n    onRemoveComment: (postID, id) => dispatch(postActions.removeComment(postID, id)),\r\n    onSendcomment: (name,body, email, idPost) => dispatch(postActions.saveCommentToPost(name,body, email, idPost)),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PostsBuilder);\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport PostBuilder from './Containers/PostsBuilder/PostsBuilder';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PostBuilder />\n    </div>\n  );\n}\n\nexport default App;\n","import * as actionTypes from '../actions/actionTypes';\r\n\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  posts : [],\r\n}\r\n\r\nconst reducer = (state=initialState, action) => {\r\n  switch(action.type) {\r\n    case actionTypes.FETCH_SUCCESS :\r\n      return {\r\n        ...state,\r\n        posts: action.fetchedPosts,\r\n      }\r\n    case actionTypes.FETCH_COMMENTS_SUCCESS :\r\n    return {\r\n      ...state,\r\n      posts: state.posts.map(post => {\r\n        if(post.id == action.id) {\r\n          post = {...post, comments: action.fetchedComments,}\r\n        }\r\n        return post;\r\n      })\r\n    }\r\n    case actionTypes.REMOVE_COMMENT :\r\n    return {\r\n      ...state,\r\n      posts :\r\n        state.posts.map(post => {\r\n          if(action.postID == post.id) {\r\n            post = {\r\n              ...post,\r\n              comments : post.comments.filter(comment => {\r\n                if(comment.id !== action.id) {\r\n                  return comment;\r\n                }\r\n              })\r\n            }\r\n        }\r\n        return post;\r\n      })\r\n    }\r\n    case actionTypes.SEND_COMMENTS :\r\n    const catchedComment = {\r\n      name: action.name,\r\n      body: action.body,\r\n      email: action.email,\r\n      id: Math.random()*1000,\r\n    }\r\n      return {\r\n        ...state,\r\n         posts: state.posts.map(post => {\r\n           if(post.id == action.postID) {\r\n             let comments = post.comments;\r\n             comments.push(catchedComment);\r\n           }\r\n           return post;\r\n         })\r\n      }\r\n      case actionTypes.START_FETCHING_COMMENTS:\r\n        return {\r\n          ...state,\r\n          loading: true,\r\n        }\r\n      case actionTypes.FINISH_FETCHING_COMMENTS:\r\n        return {\r\n          ...state,\r\n          loading: false,\r\n        }\r\n    }\r\n    return state;\r\n}\r\nexport default reducer;\r\n","import { put } from 'redux-saga/effects';\r\nimport * as actions from '../actions/posts';\r\nimport axios from 'axios';\r\n\r\nexport function* fetchPostsSaga(action) {\r\n  try {\r\n    const response = yield axios.get('https://jsonplaceholder.typicode.com/posts');\r\n    const fetchedPosts = [];\r\n    for(let key in response.data) {\r\n        fetchedPosts.push({\r\n          ...response.data[key],\r\n        })\r\n      }\r\n      yield put(actions.fetchedSuccess(fetchedPosts));\r\n    } catch (error) {\r\n  }\r\n}\r\n\r\nexport function* fetchCommentsSaga(action) {\r\n  yield put(actions.fetchCommentsStart());\r\n  try {\r\n    const response = yield axios.get('https://jsonplaceholder.typicode.com/comments?postId=' + action.id);\r\n    const fetchedComments = [];\r\n    for(let key in response.data) {\r\n      fetchedComments.push({\r\n        id: action.id,\r\n        ...response.data[key],\r\n      })\r\n    }\r\n    yield put(actions.fetchCommentsSuccess(fetchedComments, action.id));\r\n    yield put(actions.finishFetchingComments())\r\n  } catch (error) {\r\n\r\n  }\r\n}\r\nexport function* saveCommentToPostSaga(action) {\r\n\r\n   let postedCommentsId = [];\r\n   let catchedPosts = yield localStorage.getItem('postID');\r\n   if(!catchedPosts) {\r\n      postedCommentsId.push(action.postID);\r\n      yield localStorage.setItem('postID', JSON.stringify(postedCommentsId));\r\n      yield put(actions.sendComment(action.name, action.body, action.email, action.postID))\r\n   }\r\n   else {\r\n     postedCommentsId = yield JSON.parse(localStorage.getItem('postID'));\r\n     const wasCommented = postedCommentsId.includes(action.postID);\r\n     if(wasCommented) {\r\n       alert('Nie możesz dodać dwóch komentarzy do jednego posta!');\r\n     } else {\r\n         postedCommentsId.push(action.postID);\r\n         yield put(actions.sendComment(action.name, action.body, action.email, action.postID))\r\n         yield localStorage.setItem('postID', JSON.stringify(postedCommentsId));\r\n     }\r\n   }\r\n}\r\n","import { takeEvery, all } from 'redux-saga/effects';\r\nimport { fetchPostsSaga, fetchCommentsSaga, saveCommentToPostSaga } from './posts';\r\nimport * as actionTypes from '../actions/actionTypes';\r\n\r\nexport function* watchPosts() {\r\n  yield takeEvery(actionTypes.FETCH_POSTS, fetchPostsSaga);\r\n  yield takeEvery(actionTypes.FETCH_COMMENTS_START, fetchCommentsSaga);\r\n  yield takeEvery(actionTypes.SAVE_COMMENT_TO_POST, saveCommentToPostSaga)\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport postReducer from './store/reducers/posts';\nimport { watchPosts } from './store/sagas/index';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootReducer = combineReducers({\n  posts: postReducer,\n})\nconst sagaMiddleware = createSagaMiddleware();\nconst store=createStore(rootReducer, applyMiddleware(sagaMiddleware));\nsagaMiddleware.run(watchPosts)\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}